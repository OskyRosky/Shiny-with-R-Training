residuos <- summary(modelo_multiple)$residuals
ggplot(data = Boston, aes(y = residuos, x = medv)) + geom_point(col = 'blue') + geom_abline(slope = 0)
plot(modelo_multiple, 1)
plot(modelo_multiple, 3)
plot(residuos)
ggpubr::ggdensity(residuos,  fill = "lightgray", add = "mean",  xlab = "Residuos de la RLM")
n <- nrow(Boston)
k <- length(modelo_multiple$coefficients)-1
cv <- 2*sqrt(k/n)
plot(dffits(modelo_multiple),
ylab = "Standardized dfFits", xlab = "Index",
main = paste("Standardized DfFits, \n critical value = 2*sqrt(k/n) = +/-", round(cv,3)))
#Critical Value horizontal lines
abline(h = cv, lty = 2)
abline(h = -cv, lty = 2)
plot(modelo_multiple, 4)
plot(modelo_multiple, 5)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_dfbetas(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_dfbetas(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_resid_lev(modelo_multiple)
installed.packages("taskscheduleR", dependency= TRUE)
install.packages("taskscheduleR")
devtools::install_github("rstudio/addinexamples", type = "source")
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(readxl))
suppressWarnings(library(MASS))
suppressWarnings(library(faraway))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
suppressWarnings(library(modelr))
suppressWarnings(library(broom))
suppressWarnings(library(ggpubr))
suppressWarnings(library(nortest))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lmtest))
suppressWarnings(library(corrplot))
suppressWarnings(library(RColorBrewer))
suppressWarnings(library(car))
suppressWarnings(library(olsrr))
suppressWarnings(library(glmnet))
suppressWarnings(library(quantreg))
# Importar archivos
initech <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/initech.xlsx")
autompg <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/autompg.xlsx")
marketing <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/marketing.xlsx")
# create dataframe
df1 = data.frame(Name = c('George','Andrea', 'Micheal','Maggie','Ravi','Xien','Jalpa'),
Grade_score=c(4,6,2,9,5,7,8),
Mathematics1_score=c(45,78,44,89,66,49,72),
Science_score=c(56,52,45,88,33,90,47))
df1
df2<-subset(df1, Name!="George" & Name!="Andrea")
df2
library(dplyr)
df2 <- df1 %>% slice(-c(2, 4, 6))
df2
mtcars$disp[which(mtcars$disp >420)] <- c(mtcars$disp[which(mtcars$disp >420)]*2)
boxplot(mtcars$disp)
boxplot(mtcars$disp, plot=TRUE)$out
outliers <- boxplot(mtcars$disp, plot=FALSE)$out
print(outliers)
mtcars[which(mtcars$disp %in% outliers),]
mtcars <- mtcars[-which(mtcars$disp %in% outliers),]
boxplot(mtcars$disp)
tail(Boston)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
residuos <- summary(modelo_multiple)$residuals
boxplot(residuos)
library(dplyr)
residuos <- as.data.frame(residuos)
dim(residuos)
dim(Boston)
Boston <- bind_cols(Boston,residuos)
dim(Boston)
boxplot(Boston$residuos, plot=FALSE)$out
outliers <- boxplot(Boston$residuos, plot=FALSE)$out
print(outliers)
Boston[which(Boston$residuos %in% outliers),]
Boston <-  Boston[-which(Boston$residuos %in% outliers),]
boxplot(Boston$residuos)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
hist(initech$salary)
boxplot(initech$salary)
initech_fit = lm(salary ~ years, data = initech)
summary(initech_fit)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit, col = "darkorange", lwd = 2)
initech_fit = lm(salary ~ years, data = initech)
summary(initech_fit)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit), resid(initech_fit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
par(mfrow = c(1, 2))
plot(fitted(initech_fit), resid(initech_fit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit_log), resid(initech_fit_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit_log), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit_log), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit_log), resid(initech_fit_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit_log), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit_log), col = "dodgerblue", lwd = 2)
savings_model = lm(sr ~ ., data = savings)
boxcox(savings_model, plotit = TRUE)
"![](boxcox.png)"
boxcox(savings_model, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.1))
plot(fitted(savings_model), resid(savings_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
gala_model = lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model), resid(gala_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
gala_model_cox = lm((((Species ^ 0.3) - 1) / 0.3) ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model_cox), resid(gala_model_cox), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(initech_fit)
mark_mod = lm(sales ~ advert, data = marketing)
summary(mark_mod)
library(glmnet)
model <- glmnet(x, y, alpha = 0)
summary(model)
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 0)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
q("no", 1, FALSE)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(readxl)
datoscuartil <- read_excel("C:/Users/oscar/Downloads/datoscuartil.xlsx")
View(datoscuartil)
library(GGally)
install.packages("GGally")
install.packages("GGally")
library(GGally)
library(GGally)
data <- datoscuartil
ggcorr(data, method = c("everything", "pearson"))
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(readxl))
suppressWarnings(library(tidyr))
suppressWarnings(library(DT))
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(stats))
suppressWarnings(library(FactoMineR))
suppressWarnings(library(ade4))
suppressWarnings(library(amap))
suppressWarnings(library(ggplot2))
suppressWarnings(library(factoextra))
suppressWarnings(library(FactoMineR))
suppressWarnings(library(factoextra))
#library("grid")
suppressWarnings(library(REdaS))
suppressWarnings(library(corpcor))
suppressWarnings(library(GPArotation))
suppressWarnings(library(psych))
suppressWarnings(library(ggplot2))
suppressWarnings(library(MASS))
suppressWarnings(library(GGally))
suppressWarnings(library(corrplot))
suppressWarnings(library(Hmisc))
suppressWarnings(library(psych))
suppressWarnings(library(corrplot))
suppressWarnings(library(nFactors))
suppressWarnings(library(mclust))
suppressWarnings(library(reshape2))
suppressWarnings(library(MVN))
suppressWarnings(library(stats))
suppressWarnings(library(cluster))
suppressWarnings(library(mclust))
suppressWarnings(library(dendextend))
suppressWarnings(library(igraph))
suppressWarnings(library(ape))
suppressWarnings(library(NbClust))
suppressWarnings(library(factoextra))
suppressWarnings(library(ggpubr))
suppressWarnings(library(purrr))
suppressWarnings(library(clustertend))
suppressWarnings(library(fpc))
suppressWarnings(library(pheatmap))
suppressWarnings(library(dendextend))
suppressWarnings(library(clValid))
suppressWarnings(library(klaR))
suppressWarnings(library(boot))
suppressWarnings(library(broom))
suppressWarnings(library(forecast))
suppressWarnings(library(tseries))
suppressWarnings(library(ggfortify))
# Importar archivos
library(tidyverse)
install.packages("ISLR")
library(tidyverse)
library(tidyverse)
library(ISLR)
datos <- Default
# Se recodifican los niveles No, Yes a 1 y 0
datos <- datos %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(datos)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(ISLR)
datos <- Default
# Se recodifican los niveles No, Yes a 1 y 0
datos <- datos %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(datos)
head(datos)
datos <- Default
# Ajuste de un modelo lineal por mínimos cuadrados.
modelo_lineal <- lm(default ~ balance, data = datos)
# Ajuste de un modelo lineal por mínimos cuadrados.
modelo_lineal <- lm(default ~ balance, data = datos)
# Representación gráfica del modelo.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")
# Ajuste de un modelo lineal por mínimos cuadrados.
modelo_lineal <- lm(default ~ balance, data = datos)
# Representación gráfica del modelo.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")
predict(object = modelo_lineal, newdata = data.frame(balance = 10000))
# Representación gráfica del modelo.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
stat_function(fun = function(x){predict(modelo_logistico,
newdata = data.frame(balance = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad default") +
theme(legend.position = "none")
# Con geom_smooth se puede obtener el gráfico directamente.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")
suppressWarnings(library(dplyr))
library(tidyverse)
library(ISLR)
library(dplyr)
datos <- Default
datos <- datos %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
# Se recodifican los niveles No, Yes a 1 y 0
head(datos)
datos <- Default
datos <- datos %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(datos)
# Ajuste de un modelo lineal por mínimos cuadrados.
modelo_lineal <- lm(default ~ balance, data = datos)
# Representación gráfica del modelo.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")
predict(object = modelo_lineal, newdata = data.frame(balance = 10000))
modelo_logistico <- glm(default ~ balance, data = datos, family = "binomial")
# Representación gráfica del modelo.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
stat_function(fun = function(x){predict(modelo_logistico,
newdata = data.frame(balance = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad default") +
theme(legend.position = "none")
# Con geom_smooth se puede obtener el gráfico directamente.
ggplot(data = datos, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")
matricula <- as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,
0, 0, 0, 0, 1, 0, 0, 0, 1, 1))
matematicas <- c(41, 53, 54, 47, 57, 51, 42, 45, 54, 52, 51, 51, 71, 57, 50, 43,
51, 60, 62, 57, 35, 75, 45, 57, 45, 46, 66, 57, 49, 49, 57, 64,
63, 57, 50, 58, 75, 68, 44, 40, 41, 62, 57, 43, 48, 63, 39, 70,
63, 59, 61, 38, 61, 49, 73, 44, 42, 39, 55, 52, 45, 61, 39, 41,
50, 40, 60, 47, 59, 49, 46, 58, 71, 58, 46, 43, 54, 56, 46, 54,
57, 54, 71, 48, 40, 64, 51, 39, 40, 61, 66, 49, 65, 52, 46, 61,
72, 71, 40, 69, 64, 56, 49, 54, 53, 66, 67, 40, 46, 69, 40, 41,
57, 58, 57, 37, 55, 62, 64, 40, 50, 46, 53, 52, 45, 56, 45, 54,
56, 41, 54, 72, 56, 47, 49, 60, 54, 55, 33, 49, 43, 50, 52, 48,
58, 43, 41, 43, 46, 44, 43, 61, 40, 49, 56, 61, 50, 51, 42, 67,
53, 50, 51, 72, 48, 40, 53, 39, 63, 51, 45, 39, 42, 62, 44, 65,
63, 54, 45, 60, 49, 48, 57, 55, 66, 64, 55, 42, 56, 53, 41, 42,
53, 42, 60, 52, 38, 57, 58, 65)
datos <- data.frame(matricula, matematicas)
head(datos, 4)
library(ggplot2)
table(datos$matricula)
ggplot(data = datos, aes(x = matricula, y = matematicas, color = matricula)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
modelo <- glm(matricula ~ matematicas, data = datos, family = "binomial")
summary(modelo)
confint(object = modelo, level = 0.95 )
# MEDIANTE BASE GRAPHICS SIN INTERVALOS DE CONFIANZA
# Codificación 0,1 de la variable respuesta
datos$matricula <- as.character(datos$matricula)
datos$matricula <- as.numeric(datos$matricula)
plot(matricula ~ matematicas, datos, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(matrícula=1|matemáticas)",
xlab = "matemáticas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo, data.frame(matematicas = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
# MEDIANTE GGPLOT2 INCLUYENDO INTERVALOS DE CONFIANZA
datos$matricula <- as.character(datos$matricula)
datos$matricula <- as.numeric(datos$matricula)
# Se crea un vector con nuevos valores interpolados en el rango de observaciones.
nuevos_puntos <- seq(from = min(datos$matematicas), to = max(datos$matematicas),
by = 0.5)
# Predicciones de los nuevos puntos según el modelo.
# Si se indica se.fit = TRUE se devuelve el error estándar de cada predicción
# junto con el valor de la predicción (fit).
predicciones <- predict(modelo, data.frame(matematicas = nuevos_puntos),
se.fit = TRUE)
# Mediante la función logit se transforman los log_ODDs a probabilidades.
predicciones_logit <- exp(predicciones$fit) / (1 + exp(predicciones$fit))
# Se calcula el límite inferior y superior del IC del 95% sustrayendo e
# incrementando el logODDs de cada predicción 1.95*SE. Una vez calculados los
# logODDs del intervalo se transforman en probabilidades con la función logit.
limite_inferior       <- predicciones$fit - 1.96 * predicciones$se.fit
limite_inferior_logit <- exp(limite_inferior) / (1 + exp(limite_inferior))
limite_superior       <- predicciones$fit + 1.96 * predicciones$se.fit
limite_superior_logit <- exp(limite_superior) / (1 + exp(limite_superior))
# Se crea un dataframe con los nuevos puntos y sus predicciones
datos_curva <- data.frame(matematicas = nuevos_puntos,
probabilidad_matricula = predicciones_logit,
limite_inferior_logit = limite_inferior_logit,
limite_superior_logit = limite_superior_logit)
ggplot(datos, aes(x = matematicas, y = matricula)) +
geom_point(aes(color = as.factor(matricula)), shape = "I", size = 3) +
geom_line(data = datos_curva, aes(y = probabilidad_matricula),
color = "firebrick") +
geom_line(data = datos_curva, aes(y = limite_inferior_logit),
linetype = "dashed") +
geom_line(data = datos_curva, aes(y = limite_superior_logit),
linetype = "dashed") +
theme_bw() +
labs(title = "Modelo regresión logística matrícula ~ nota matemáticas",
y = "P(matrícula = 1 | matemáticas)", y = "matemáticas") +
theme(legend.position = "null") +
theme(plot.title = element_text(size = 10))
# Diferencia de residuos
# En R, un objeto glm almacena la "deviance" del modelo, así como la "deviance"
# del modelo nulo.
dif_residuos <- modelo$null.deviance - modelo$deviance
# Grados libertad
df <- modelo$df.null - modelo$df.residual
# p-value
p_value <- pchisq(q = dif_residuos,df = df, lower.tail = FALSE)
paste("Diferencia de residuos:", round(dif_residuos, 4))
anova(modelo, test = "Chisq")
install.packages("vcd")
library(vcd)
predicciones <- ifelse(test = modelo$fitted.values > 0.5, yes = 1, no = 0)
matriz_confusion <- table(modelo$model$matricula, predicciones,
dnn = c("observaciones", "predicciones"))
matriz_confusion
library(tidyverse)
library(ISLR)
library(dplyr)
datos <- Default
datos <- datos %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(datos)
probitMod <- glm(ABOVE50K ~ RELATIONSHIP + AGE + CAPITALGAIN + OCCUPATION + EDUCATIONNUM, data=trainingData, family=binomial(link="probit"))  # build the logit model
install.packages("shinydashboardPlus")
devtools::install_github("RinteRface/shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
shinydashboardPlusGallery()
knitr::opts_chunk$set(echo = TRUE)
install.packages("shinydashboardPlus")
devtools::install_github("RinteRface/shinydashboardPlus")
# 1
install.packages("shinydashboardPlus")
library(shiny); runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 5/Resultados/General.R')
devtools::install_github("RinteRface/shinydashboardPlus")
suppressMessages(library(shinydashboardPlus))
library(shiny); runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
setwd("C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Scripts")
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
runApp('C:/Users/oscar/Desktop/Curso de Shiny/Tema 6/body/Body.R')
